{
  "stats": {
    "suites": 1,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2025-10-28T06:39:59.971Z",
    "end": "2025-10-28T06:40:05.380Z",
    "duration": 5409,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "9a9b0d05-289e-427d-a361-8ff3acc7eab8",
      "title": "",
      "fullFile": "cypress\\e2e\\pay-advanced.cy.js",
      "file": "cypress\\e2e\\pay-advanced.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e65fa426-963c-4bd3-ba85-b8490274e8fd",
          "title": "Payment API - Advanced Scenarios",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should prevent duplicate payment for the same order",
              "fullTitle": "Payment API - Advanced Scenarios should prevent duplicate payment for the same order",
              "timedOut": null,
              "duration": 104,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n  orderId: 'o_adv_001',\n  amount: 100\n};\ncy.request({\n  method: 'POST',\n  url: endpoint,\n  body: payload,\n  failOnStatusCode: false\n}).then(res1 => {\n  expect(res1.status).to.eq(200);\n  expect(res1.body.status).to.eq('SUCCESS');\n  cy.request({\n    method: 'POST',\n    url: endpoint,\n    body: payload,\n    failOnStatusCode: false\n  }).then(res2 => {\n    expect(res2.status).to.eq(409);\n    expect(res2.body.status).to.eq('FAILED');\n    expect(res2.body.error).to.eq('Duplicate payment');\n  });\n});",
              "err": {},
              "uuid": "464800c1-b6e7-4467-8534-0ad5d212758b",
              "parentUUID": "e65fa426-963c-4bd3-ba85-b8490274e8fd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail if amount does not match order total",
              "fullTitle": "Payment API - Advanced Scenarios should fail if amount does not match order total",
              "timedOut": null,
              "duration": 28,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n  orderId: 'o_12345',\n  amount: 999\n};\ncy.request({\n  method: 'POST',\n  url: endpoint,\n  body: payload,\n  failOnStatusCode: false\n}).then(res => {\n  expect(res.status).to.eq(400);\n  expect(res.body.status).to.eq('FAILED');\n  expect(res.body.error).to.eq('Amount mismatch');\n});",
              "err": {},
              "uuid": "6a0c5942-2f26-4d58-92b5-84f79748833b",
              "parentUUID": "e65fa426-963c-4bd3-ba85-b8490274e8fd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle delayed response from order-service",
              "fullTitle": "Payment API - Advanced Scenarios should handle delayed response from order-service",
              "timedOut": null,
              "duration": 5040,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n  orderId: 'o_slow',\n  amount: 100\n};\ncy.request({\n  method: 'POST',\n  url: endpoint,\n  body: payload,\n  timeout: 10000,\n  failOnStatusCode: false\n}).then(res => {\n  expect(res.status).to.eq(200);\n  expect(res.body.status).to.eq('SUCCESS');\n});",
              "err": {},
              "uuid": "5d00396c-0f6e-43a2-abec-19948bcb4cf0",
              "parentUUID": "e65fa426-963c-4bd3-ba85-b8490274e8fd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail if order-service is unreachable or order is missing",
              "fullTitle": "Payment API - Advanced Scenarios should fail if order-service is unreachable or order is missing",
              "timedOut": null,
              "duration": 39,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n  orderId: 'o_broken',\n  amount: 100\n};\ncy.request({\n  method: 'POST',\n  url: endpoint,\n  body: payload,\n  failOnStatusCode: false\n}).then(res => {\n  expect(res.status).to.eq(404);\n  expect(res.body.status).to.eq('FAILED');\n  expect(res.body.error).to.eq('Order not found');\n});",
              "err": {},
              "uuid": "ee82125a-a976-4502-897d-4c69d1a7a610",
              "parentUUID": "e65fa426-963c-4bd3-ba85-b8490274e8fd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail if orderId contains script injection",
              "fullTitle": "Payment API - Advanced Scenarios should fail if orderId contains script injection",
              "timedOut": null,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n  orderId: '<script>alert(1)</script>',\n  amount: 100\n};\ncy.request({\n  method: 'POST',\n  url: endpoint,\n  body: payload,\n  failOnStatusCode: false\n}).then(res => {\n  expect(res.status).to.eq(400);\n  expect(res.body.status).to.eq('FAILED');\n});",
              "err": {},
              "uuid": "8e05aab9-71c7-4dc6-8479-2ff16cbdc1bd",
              "parentUUID": "e65fa426-963c-4bd3-ba85-b8490274e8fd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail if amount contains script injection",
              "fullTitle": "Payment API - Advanced Scenarios should fail if amount contains script injection",
              "timedOut": null,
              "duration": 19,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n  orderId: 'o_12345',\n  amount: \"<script>100</script>\"\n};\ncy.request({\n  method: 'POST',\n  url: endpoint,\n  body: payload,\n  failOnStatusCode: false\n}).then(res => {\n  expect(res.status).to.eq(400);\n  expect(res.body.status).to.eq('FAILED');\n});",
              "err": {},
              "uuid": "ffe2968d-0e88-4081-b38c-32b58e080ed1",
              "parentUUID": "e65fa426-963c-4bd3-ba85-b8490274e8fd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail if orderId is null",
              "fullTitle": "Payment API - Advanced Scenarios should fail if orderId is null",
              "timedOut": null,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n  orderId: null,\n  amount: 100\n};\ncy.request({\n  method: 'POST',\n  url: endpoint,\n  body: payload,\n  failOnStatusCode: false\n}).then(res => {\n  expect(res.status).to.eq(400);\n  expect(res.body.status).to.eq('FAILED');\n  expect(res.body.error).to.eq('Missing orderId');\n});",
              "err": {},
              "uuid": "1a95a5f9-9f78-4029-9f73-932f6cd72e1b",
              "parentUUID": "e65fa426-963c-4bd3-ba85-b8490274e8fd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail if amount is extremely large",
              "fullTitle": "Payment API - Advanced Scenarios should fail if amount is extremely large",
              "timedOut": null,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n  orderId: 'o_12345',\n  amount: 999999999999999999999\n};\ncy.request({\n  method: 'POST',\n  url: endpoint,\n  body: payload,\n  failOnStatusCode: false\n}).then(res => {\n  expect(res.status).to.eq(400);\n  expect(res.body.status).to.eq('FAILED');\n});",
              "err": {},
              "uuid": "0279e51f-ccda-4b26-92eb-ee48930b5d9b",
              "parentUUID": "e65fa426-963c-4bd3-ba85-b8490274e8fd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "464800c1-b6e7-4467-8534-0ad5d212758b",
            "6a0c5942-2f26-4d58-92b5-84f79748833b",
            "5d00396c-0f6e-43a2-abec-19948bcb4cf0",
            "ee82125a-a976-4502-897d-4c69d1a7a610",
            "8e05aab9-71c7-4dc6-8479-2ff16cbdc1bd",
            "ffe2968d-0e88-4081-b38c-32b58e080ed1",
            "1a95a5f9-9f78-4029-9f73-932f6cd72e1b",
            "0279e51f-ccda-4b26-92eb-ee48930b5d9b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5278,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.3.0"
    }
  }
}