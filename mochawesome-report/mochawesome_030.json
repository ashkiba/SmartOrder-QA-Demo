{
  "stats": {
    "suites": 1,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2025-10-28T08:57:57.816Z",
    "end": "2025-10-28T08:58:03.042Z",
    "duration": 5226,
    "testsRegistered": 3,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "1e16285c-5a5f-4d87-be57-1a6002b0ea11",
      "title": "",
      "fullFile": "cypress\\e2e\\order.cy.js",
      "file": "cypress\\e2e\\order.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "67b5e63c-4845-4897-aab7-8d47da354d89",
          "title": "Order Service API Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should fetch an existing order successfully",
              "fullTitle": "Order Service API Tests should fetch an existing order successfully",
              "timedOut": null,
              "duration": 71,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request(`${baseUrl}/api/order/o_12345`).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('order');\n  expect(response.body.order).to.have.property('orderId', 'o_12345');\n  expect(response.body.order.items).to.include('item1');\n});",
              "err": {},
              "uuid": "3793a066-a529-421d-8790-2549d09f5bc6",
              "parentUUID": "67b5e63c-4845-4897-aab7-8d47da354d89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle delayed orders (simulate 5s wait)",
              "fullTitle": "Order Service API Tests should handle delayed orders (simulate 5s wait)",
              "timedOut": null,
              "duration": 5042,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request(`${baseUrl}/api/order/o_slow`).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.order.orderId).to.eq('o_slow');\n});",
              "err": {},
              "uuid": "b25fc2a7-e348-45c9-a211-78e55b3baa91",
              "parentUUID": "67b5e63c-4845-4897-aab7-8d47da354d89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 for non-existent order",
              "fullTitle": "Order Service API Tests should return 404 for non-existent order",
              "timedOut": null,
              "duration": 39,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  url: `${baseUrl}/api/order/o_notfound`,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(404);\n  expect(response.body).to.have.property('error', 'Order not found');\n});",
              "err": {},
              "uuid": "60073f2b-7f30-42b9-a064-f0c27ff92544",
              "parentUUID": "67b5e63c-4845-4897-aab7-8d47da354d89",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3793a066-a529-421d-8790-2549d09f5bc6",
            "b25fc2a7-e348-45c9-a211-78e55b3baa91",
            "60073f2b-7f30-42b9-a064-f0c27ff92544"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5152,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.3.0"
    }
  }
}