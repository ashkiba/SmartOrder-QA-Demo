{
  "stats": {
    "suites": 1,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2025-10-28T08:58:04.807Z",
    "end": "2025-10-28T08:58:10.276Z",
    "duration": 5469,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "361fb2e4-e576-416e-a4f6-08f80f72b086",
      "title": "",
      "fullFile": "cypress\\e2e\\pay-advanced.cy.js",
      "file": "cypress\\e2e\\pay-advanced.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "835aeb70-d4b7-4ad1-aad5-3f9526d08c87",
          "title": "Payment API - Advanced Scenarios",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should prevent duplicate payment for the same order",
              "fullTitle": "Payment API - Advanced Scenarios should prevent duplicate payment for the same order",
              "timedOut": null,
              "duration": 110,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n  orderId: 'o_adv_001',\n  amount: 100\n};\ncy.request({\n  method: 'POST',\n  url: endpoint,\n  body: payload,\n  failOnStatusCode: false\n}).then(res1 => {\n  expect(res1.status).to.eq(200);\n  expect(res1.body.status).to.eq('SUCCESS');\n  cy.request({\n    method: 'POST',\n    url: endpoint,\n    body: payload,\n    failOnStatusCode: false\n  }).then(res2 => {\n    expect(res2.status).to.eq(409);\n    expect(res2.body.status).to.eq('FAILED');\n    expect(res2.body.error).to.eq('Duplicate payment');\n  });\n});",
              "err": {},
              "uuid": "5ca3b94f-f27a-457c-b771-91a9621cf8da",
              "parentUUID": "835aeb70-d4b7-4ad1-aad5-3f9526d08c87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail if amount does not match order total",
              "fullTitle": "Payment API - Advanced Scenarios should fail if amount does not match order total",
              "timedOut": null,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n  orderId: 'o_12345',\n  amount: 999\n};\ncy.request({\n  method: 'POST',\n  url: endpoint,\n  body: payload,\n  failOnStatusCode: false\n}).then(res => {\n  expect(res.status).to.eq(400);\n  expect(res.body.status).to.eq('FAILED');\n  expect(res.body.error).to.eq('Amount mismatch');\n});",
              "err": {},
              "uuid": "8a1894ca-7130-4483-84ea-d7ea936423a2",
              "parentUUID": "835aeb70-d4b7-4ad1-aad5-3f9526d08c87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle delayed response from order-service",
              "fullTitle": "Payment API - Advanced Scenarios should handle delayed response from order-service",
              "timedOut": null,
              "duration": 5056,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n  orderId: 'o_slow',\n  amount: 100\n};\ncy.request({\n  method: 'POST',\n  url: endpoint,\n  body: payload,\n  timeout: 10000,\n  failOnStatusCode: false\n}).then(res => {\n  expect(res.status).to.eq(200);\n  expect(res.body.status).to.eq('SUCCESS');\n});",
              "err": {},
              "uuid": "285d6254-beae-486e-b669-94cb0f7a6901",
              "parentUUID": "835aeb70-d4b7-4ad1-aad5-3f9526d08c87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail if order-service is unreachable or order is missing",
              "fullTitle": "Payment API - Advanced Scenarios should fail if order-service is unreachable or order is missing",
              "timedOut": null,
              "duration": 41,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n  orderId: 'o_broken',\n  amount: 100\n};\ncy.request({\n  method: 'POST',\n  url: endpoint,\n  body: payload,\n  failOnStatusCode: false\n}).then(res => {\n  expect(res.status).to.eq(404);\n  expect(res.body.status).to.eq('FAILED');\n  expect(res.body.error).to.eq('Order not found');\n});",
              "err": {},
              "uuid": "4c4c08bd-9c01-4b4a-8b79-58a76d3df171",
              "parentUUID": "835aeb70-d4b7-4ad1-aad5-3f9526d08c87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail if orderId contains script injection",
              "fullTitle": "Payment API - Advanced Scenarios should fail if orderId contains script injection",
              "timedOut": null,
              "duration": 19,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n  orderId: '<script>alert(1)</script>',\n  amount: 100\n};\ncy.request({\n  method: 'POST',\n  url: endpoint,\n  body: payload,\n  failOnStatusCode: false\n}).then(res => {\n  expect(res.status).to.eq(400);\n  expect(res.body.status).to.eq('FAILED');\n});",
              "err": {},
              "uuid": "ff3c153b-6593-483f-b788-93a9e82c4f38",
              "parentUUID": "835aeb70-d4b7-4ad1-aad5-3f9526d08c87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail if amount contains script injection",
              "fullTitle": "Payment API - Advanced Scenarios should fail if amount contains script injection",
              "timedOut": null,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n  orderId: 'o_12345',\n  amount: \"<script>100</script>\"\n};\ncy.request({\n  method: 'POST',\n  url: endpoint,\n  body: payload,\n  failOnStatusCode: false\n}).then(res => {\n  expect(res.status).to.eq(400);\n  expect(res.body.status).to.eq('FAILED');\n});",
              "err": {},
              "uuid": "205c7d02-6b45-422e-82bc-96c0cf8dd57c",
              "parentUUID": "835aeb70-d4b7-4ad1-aad5-3f9526d08c87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail if orderId is null",
              "fullTitle": "Payment API - Advanced Scenarios should fail if orderId is null",
              "timedOut": null,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n  orderId: null,\n  amount: 100\n};\ncy.request({\n  method: 'POST',\n  url: endpoint,\n  body: payload,\n  failOnStatusCode: false\n}).then(res => {\n  expect(res.status).to.eq(400);\n  expect(res.body.status).to.eq('FAILED');\n  expect(res.body.error).to.eq('Missing orderId');\n});",
              "err": {},
              "uuid": "b9e29346-dedf-4c3f-ad93-2e3fbc9249de",
              "parentUUID": "835aeb70-d4b7-4ad1-aad5-3f9526d08c87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail if amount is extremely large",
              "fullTitle": "Payment API - Advanced Scenarios should fail if amount is extremely large",
              "timedOut": null,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n  orderId: 'o_12345',\n  amount: 999999999999999999999\n};\ncy.request({\n  method: 'POST',\n  url: endpoint,\n  body: payload,\n  failOnStatusCode: false\n}).then(res => {\n  expect(res.status).to.eq(400);\n  expect(res.body.status).to.eq('FAILED');\n});",
              "err": {},
              "uuid": "5893c529-398b-4941-a1fc-9410d4fac26a",
              "parentUUID": "835aeb70-d4b7-4ad1-aad5-3f9526d08c87",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5ca3b94f-f27a-457c-b771-91a9621cf8da",
            "8a1894ca-7130-4483-84ea-d7ea936423a2",
            "285d6254-beae-486e-b669-94cb0f7a6901",
            "4c4c08bd-9c01-4b4a-8b79-58a76d3df171",
            "ff3c153b-6593-483f-b788-93a9e82c4f38",
            "205c7d02-6b45-422e-82bc-96c0cf8dd57c",
            "b9e29346-dedf-4c3f-ad93-2e3fbc9249de",
            "5893c529-398b-4941-a1fc-9410d4fac26a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5311,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.3.0"
    }
  }
}