{
  "stats": {
    "suites": 1,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2025-10-28T06:34:17.056Z",
    "end": "2025-10-28T06:34:22.516Z",
    "duration": 5460,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "2aa22280-e7d6-4f5d-96ab-581aeec523ef",
      "title": "",
      "fullFile": "cypress\\e2e\\pay-advanced.cy.js",
      "file": "cypress\\e2e\\pay-advanced.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "25deb85a-7cf9-41de-be6d-52359951afff",
          "title": "Payment API - Advanced Scenarios",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should prevent duplicate payment for the same order",
              "fullTitle": "Payment API - Advanced Scenarios should prevent duplicate payment for the same order",
              "timedOut": null,
              "duration": 107,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n  orderId: 'o_adv_001',\n  amount: 100\n};\ncy.request({\n  method: 'POST',\n  url: endpoint,\n  body: payload,\n  failOnStatusCode: false\n}).then(res1 => {\n  expect(res1.status).to.eq(200);\n  expect(res1.body.status).to.eq('SUCCESS');\n  cy.request({\n    method: 'POST',\n    url: endpoint,\n    body: payload,\n    failOnStatusCode: false\n  }).then(res2 => {\n    expect(res2.status).to.eq(409);\n    expect(res2.body.status).to.eq('FAILED');\n    expect(res2.body.error).to.eq('Duplicate payment');\n  });\n});",
              "err": {},
              "uuid": "b9f95e73-27ee-4efb-a409-bd2ae311b88d",
              "parentUUID": "25deb85a-7cf9-41de-be6d-52359951afff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail if amount does not match order total",
              "fullTitle": "Payment API - Advanced Scenarios should fail if amount does not match order total",
              "timedOut": null,
              "duration": 33,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n  orderId: 'o_12345',\n  amount: 999\n};\ncy.request({\n  method: 'POST',\n  url: endpoint,\n  body: payload,\n  failOnStatusCode: false\n}).then(res => {\n  expect(res.status).to.eq(400);\n  expect(res.body.status).to.eq('FAILED');\n  expect(res.body.error).to.eq('Amount mismatch');\n});",
              "err": {},
              "uuid": "b46d65d8-9466-408c-9ab2-f98a19e74b55",
              "parentUUID": "25deb85a-7cf9-41de-be6d-52359951afff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle delayed response from order-service",
              "fullTitle": "Payment API - Advanced Scenarios should handle delayed response from order-service",
              "timedOut": null,
              "duration": 5054,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n  orderId: 'o_slow',\n  amount: 100\n};\ncy.request({\n  method: 'POST',\n  url: endpoint,\n  body: payload,\n  timeout: 10000,\n  failOnStatusCode: false\n}).then(res => {\n  expect(res.status).to.eq(200);\n  expect(res.body.status).to.eq('SUCCESS');\n});",
              "err": {},
              "uuid": "af98ba73-d7ab-48cc-b330-ed304378ed7b",
              "parentUUID": "25deb85a-7cf9-41de-be6d-52359951afff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail if order-service is unreachable or order is missing",
              "fullTitle": "Payment API - Advanced Scenarios should fail if order-service is unreachable or order is missing",
              "timedOut": null,
              "duration": 37,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n  orderId: 'o_broken',\n  amount: 100\n};\ncy.request({\n  method: 'POST',\n  url: endpoint,\n  body: payload,\n  failOnStatusCode: false\n}).then(res => {\n  expect(res.status).to.eq(404);\n  expect(res.body.status).to.eq('FAILED');\n  expect(res.body.error).to.eq('Order not found');\n});",
              "err": {},
              "uuid": "7d996b56-9629-44bf-bc46-eca2c84ec308",
              "parentUUID": "25deb85a-7cf9-41de-be6d-52359951afff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail if orderId contains script injection",
              "fullTitle": "Payment API - Advanced Scenarios should fail if orderId contains script injection",
              "timedOut": null,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n  orderId: '<script>alert(1)</script>',\n  amount: 100\n};\ncy.request({\n  method: 'POST',\n  url: endpoint,\n  body: payload,\n  failOnStatusCode: false\n}).then(res => {\n  expect(res.status).to.eq(400);\n  expect(res.body.status).to.eq('FAILED');\n});",
              "err": {},
              "uuid": "d76773ff-fc58-4a69-897d-bda6c979d8cf",
              "parentUUID": "25deb85a-7cf9-41de-be6d-52359951afff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail if amount contains script injection",
              "fullTitle": "Payment API - Advanced Scenarios should fail if amount contains script injection",
              "timedOut": null,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n  orderId: 'o_12345',\n  amount: \"<script>100</script>\"\n};\ncy.request({\n  method: 'POST',\n  url: endpoint,\n  body: payload,\n  failOnStatusCode: false\n}).then(res => {\n  expect(res.status).to.eq(400);\n  expect(res.body.status).to.eq('FAILED');\n});",
              "err": {},
              "uuid": "1281d3fe-974e-4ff7-ace7-d1dd3081546b",
              "parentUUID": "25deb85a-7cf9-41de-be6d-52359951afff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail if orderId is null",
              "fullTitle": "Payment API - Advanced Scenarios should fail if orderId is null",
              "timedOut": null,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n  orderId: null,\n  amount: 100\n};\ncy.request({\n  method: 'POST',\n  url: endpoint,\n  body: payload,\n  failOnStatusCode: false\n}).then(res => {\n  expect(res.status).to.eq(400);\n  expect(res.body.status).to.eq('FAILED');\n  expect(res.body.error).to.eq('Missing orderId');\n});",
              "err": {},
              "uuid": "f47af812-ecae-481b-8667-606bb4f76797",
              "parentUUID": "25deb85a-7cf9-41de-be6d-52359951afff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail if amount is extremely large",
              "fullTitle": "Payment API - Advanced Scenarios should fail if amount is extremely large",
              "timedOut": null,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n  orderId: 'o_12345',\n  amount: 999999999999999999999\n};\ncy.request({\n  method: 'POST',\n  url: endpoint,\n  body: payload,\n  failOnStatusCode: false\n}).then(res => {\n  expect(res.status).to.eq(400);\n  expect(res.body.status).to.eq('FAILED');\n});",
              "err": {},
              "uuid": "ce14bed1-85a0-490f-b496-ae817d583dae",
              "parentUUID": "25deb85a-7cf9-41de-be6d-52359951afff",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b9f95e73-27ee-4efb-a409-bd2ae311b88d",
            "b46d65d8-9466-408c-9ab2-f98a19e74b55",
            "af98ba73-d7ab-48cc-b330-ed304378ed7b",
            "7d996b56-9629-44bf-bc46-eca2c84ec308",
            "d76773ff-fc58-4a69-897d-bda6c979d8cf",
            "1281d3fe-974e-4ff7-ace7-d1dd3081546b",
            "f47af812-ecae-481b-8667-606bb4f76797",
            "ce14bed1-85a0-490f-b496-ae817d583dae"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5309,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.3.0"
    }
  }
}