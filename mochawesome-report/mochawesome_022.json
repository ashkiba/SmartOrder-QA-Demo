{
  "stats": {
    "suites": 4,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2025-10-28T06:47:04.869Z",
    "end": "2025-10-28T06:47:05.202Z",
    "duration": 333,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "caa2d17a-2f10-49db-8d22-3f2a5087709a",
      "title": "",
      "fullFile": "cypress\\e2e\\pay-security.cy.js",
      "file": "cypress\\e2e\\pay-security.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0df5cd34-73f6-451a-8671-098847e990ca",
          "title": "Payment API - Security and Injection Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9be7c2e4-b562-49a4-8406-f860c5706f4a",
              "title": "Invalid orderId values",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should reject SQL-like injection",
                  "fullTitle": "Payment API - Security and Injection Tests Invalid orderId values should reject SQL-like injection",
                  "timedOut": null,
                  "duration": 48,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'POST',\n  url: endpoint,\n  body: {\n    orderId: \"' OR 1=1 --\",\n    amount: 100\n  },\n  failOnStatusCode: false\n}).then(res => {\n  expect(res.status).to.eq(400);\n  expect(res.body.status).to.eq('FAILED');\n  expect(res.body).to.have.property('error', 'Invalid orderId');\n});",
                  "err": {},
                  "uuid": "bbf7266b-5033-4ce9-a363-03015bc32293",
                  "parentUUID": "9be7c2e4-b562-49a4-8406-f860c5706f4a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject Unicode injection",
                  "fullTitle": "Payment API - Security and Injection Tests Invalid orderId values should reject Unicode injection",
                  "timedOut": null,
                  "duration": 39,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'POST',\n  url: endpoint,\n  body: {\n    orderId: 'ðŸ’£ðŸ’¥ðŸ”¥',\n    amount: 100\n  },\n  failOnStatusCode: false\n}).then(res => {\n  expect(res.status).to.eq(400);\n  expect(res.body.status).to.eq('FAILED');\n  expect(res.body).to.have.property('error', 'Invalid orderId');\n});",
                  "err": {},
                  "uuid": "b9d79fe0-fea2-4104-82b4-a159ce7ddcc0",
                  "parentUUID": "9be7c2e4-b562-49a4-8406-f860c5706f4a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject excessive whitespace",
                  "fullTitle": "Payment API - Security and Injection Tests Invalid orderId values should reject excessive whitespace",
                  "timedOut": null,
                  "duration": 32,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'POST',\n  url: endpoint,\n  body: {\n    orderId: ' '.repeat(500),\n    amount: 100\n  },\n  failOnStatusCode: false\n}).then(res => {\n  expect(res.status).to.eq(400);\n  expect(res.body.status).to.eq('FAILED');\n  expect(res.body).to.have.property('error', 'Invalid orderId');\n});",
                  "err": {},
                  "uuid": "cfa51811-ad91-4685-863b-769824b97aed",
                  "parentUUID": "9be7c2e4-b562-49a4-8406-f860c5706f4a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bbf7266b-5033-4ce9-a363-03015bc32293",
                "b9d79fe0-fea2-4104-82b4-a159ce7ddcc0",
                "cfa51811-ad91-4685-863b-769824b97aed"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 119,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f51e122e-c135-45dd-a42d-62d03cc4e928",
              "title": "Invalid amount values",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should reject script injection in amount",
                  "fullTitle": "Payment API - Security and Injection Tests Invalid amount values should reject script injection in amount",
                  "timedOut": null,
                  "duration": 25,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'POST',\n  url: endpoint,\n  body: {\n    orderId: 'o_12345',\n    amount: \"<script>100</script>\"\n  },\n  failOnStatusCode: false\n}).then(res => {\n  expect(res.status).to.eq(400);\n  expect(res.body.status).to.eq('FAILED');\n  expect(res.body).to.have.property('error', 'Invalid amount');\n});",
                  "err": {},
                  "uuid": "b8e3caa9-4fe1-4d00-95aa-de045e4af543",
                  "parentUUID": "f51e122e-c135-45dd-a42d-62d03cc4e928",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject excessively large amount",
                  "fullTitle": "Payment API - Security and Injection Tests Invalid amount values should reject excessively large amount",
                  "timedOut": null,
                  "duration": 28,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'POST',\n  url: endpoint,\n  body: {\n    orderId: 'o_12345',\n    amount: 1e12\n  },\n  failOnStatusCode: false\n}).then(res => {\n  expect(res.status).to.eq(400);\n  expect(res.body.status).to.eq('FAILED');\n  expect(res.body).to.have.property('error', 'Invalid amount');\n});",
                  "err": {},
                  "uuid": "c3b1d550-c2b8-4de9-9bf2-47de6fb52e4d",
                  "parentUUID": "f51e122e-c135-45dd-a42d-62d03cc4e928",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b8e3caa9-4fe1-4d00-95aa-de045e4af543",
                "c3b1d550-c2b8-4de9-9bf2-47de6fb52e4d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 53,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e0fc4807-9255-4a9f-b04b-b62472cda444",
              "title": "Combined malformed payloads",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should reject mixed invalid orderId and amount",
                  "fullTitle": "Payment API - Security and Injection Tests Combined malformed payloads should reject mixed invalid orderId and amount",
                  "timedOut": null,
                  "duration": 29,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'POST',\n  url: endpoint,\n  body: {\n    orderId: '<script>alert(1)</script>',\n    amount: 'NaN'\n  },\n  failOnStatusCode: false\n}).then(res => {\n  expect(res.status).to.eq(400);\n  expect(res.body.status).to.eq('FAILED');\n});",
                  "err": {},
                  "uuid": "f4a0e012-6aab-42df-82f3-a71dad2827b0",
                  "parentUUID": "e0fc4807-9255-4a9f-b04b-b62472cda444",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f4a0e012-6aab-42df-82f3-a71dad2827b0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 29,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.3.0"
    }
  }
}